generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String    @id @default(cuid())
  name                            String?
  email                           String?   @unique
  emailVerified                   DateTime?
  hashedPassword                  String?
  username                        String?   @unique
  image                           String?
  phone_number                    String?
  shipping_country                String?
  shipping_city                   String?
  shipping_address                String?
  shipping_general_notes          String?
  shipping_info_toSellers_consent Boolean?
  shipping_info_save_consent      Boolean?
  isBuyer                         Boolean   @default(false)
  isSeller                        Boolean   @default(false)
  isWriter                        Boolean   @default(false)
  isQuizMaker                     Boolean   @default(false)
  isRecipeMaker                   Boolean   @default(false)
  createdAt                       DateTime  @default(now()) @db.Timestamp(0)
  updatedAt                       DateTime  @default(now()) @updatedAt @db.Timestamp(0)

  UserRole UserRole[]
  Account  Account[]
  Session  Session[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)

  UserRole UserRole[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    String
  roleId    Int
  createdAt DateTime @default(now()) @db.Timestamp(0)

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId], name: "User_Role_CompositeIndex")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model notes {
  id   Int    @id @default(autoincrement())
  name String
}
